---
title: My favorite tech in 2025
description: Frameworks and tools I enjoy using as a fullstack developer
links: []
showContents: false
icon:
  discriminant: none
createdAt: '2025-06-06'
updatedAt: '2025-06-06'
---

{% alert %}

⚠️ These are some of my unfiltered thoughts on frameworks and tools I've used


{% /alert %}

## Tanstack Start

After using Nextjs and Remix (now React Router 7) for a while, Tanstack Start and Router are a breadth of fresh air. While Nextjs and React Server Components are great, I feel there are too many footguns, and I often find myself re-architecting my app to follow the "Nextjs way" of doing things.

In my opinion, the best thing about Tanstack Start is the type safety.

## oRPC + Tanstck Query


[oRPC](https://github.com/unnoq/orpc) is an alternative to tRPC.

When tRPC was first released, I immediately started using it. Before that, I don't think there was a simple solution to easily share types between your frontend and backend. I didn't want to set up GraphQL or have a code-generation setup to keep things simple. Nextjs solved GETting with getServerSideProps, but they didn't have a great solution for POST. It was easy to create an API route and use fetch, but you'd have to manually type responses.

tRPC is great, but with it, you are limited to a TypeScript frontend and backend. oRPC, however, supports OpenAPI. I also find the setup process of oRPC way simpler.

## Nuqs

[Nuqs](https://nuqs.47ng.com/) makes it easy to manage URL search params with type safety.

I've always liked using the URL as a state manager. Not only is it built in to all browsers (obviously, it's just the URL), but it makes it easy share the state with others. Dealing with search params has always been a pain with React, and Nuqs makes it a bit too easy.




## Cursor
For a while, I'd just open a new ChatGPT chat, ask a question, read the code, and copy it into VSCode. It took me a while to get into Cursor and get used to using it, but after using it for around 2 months, I definitely feel way more productive.

## Railway

I've been using services like Vercel and Netlify for way too long, and the ease of serverless deployments has spoiled me. I think this has definitely made me a little scared of "traditional" hosting.

I've used Fly.io and Railway.com, and while both are amazing, Railway really stands out with its ease of use in my opinion. Although it is not super useful, I really like the canvas view in larger projects.

